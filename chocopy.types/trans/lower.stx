module lower
imports signatures/chocopy-sig

// We expect to get these types in the grading pipeline
// you are free to use your own (custom) types in your Statix file
// as long as you write transformation rules from your types to our types
// in resolve-type
signature
  sorts
  	TYPE

  constructors
    Int : TYPE
    Bool : TYPE
    String : TYPE
    ClassType : ID -> TYPE
    List : TYPE -> TYPE
    NoneType : TYPE
    EmptyList : TYPE
	Object : TYPE
	FunType: TYPE * list(TYPE) -> TYPE
	

// Here you can define the signature of the types you have used in your Statix definiions.
// This is just an example on how to do it.
// signature 
//   sorts
//     MyCustomType
//
//  constructors
//    MyCustomIntType : MyCustomType

  relations
  	var : ID -> TYPE
  	class: ID -> (TYPE * scope)
  	func: ID -> (TYPE * list(TYPE))

 name-resolution
 	labels P
 
    
rules
  

//Expressions
  exprOk: scope * Expr -> TYPE
  cexprOk: scope * ExprConstant -> TYPE
  literalOk: scope * Literal -> TYPE
  indexExprOk: scope * IndexExpr -> TYPE
 
//Definitions
	typeOfVarID: scope * ID -> TYPE
	resolveVar: scope * ID -> list((path * (ID * TYPE)))

//Functions
	resolveFunc: scope * ID -> list((path * (ID * (TYPE * list(TYPE)))))
	argsOfFunc: scope * ID -> list(TYPE)
	typeOfFunc: scope * ID -> TYPE
	

//Class Definiotions
	typeOfClassID: scope * ID -> TYPE
	scopeOfClassID: scope * ID -> scope
	resolveClass: scope * ID -> list((path * (ID * (TYPE * scope))))
	

//Utils
	notSimpleType: TYPE
	sameTypes: TYPE * TYPE
	canAdd: TYPE * TYPE
	validClassType: TYPE
  
  
  


  
rules


////////////Utils///////////////////////////////
	notSimpleType(Int()) :- false.
	notSimpleType(String()) :- false.
	notSimpleType(Bool()) :- false.

	sameTypes(x, x) :- true.
	sameTypes(List(x), NoneType()) :- true.
	sameTypes(ClassType(x), NoneType()) :- true.

	canAdd(Int(), Int()).
	canAdd(String(), String()).
	canAdd(List(x), List(x)).
	
	validClassType(Object()).
	validClassType(ClassType(x)).
	


//////////// typeOfVar ///////////////////////////////
	resolveVar(s, x) = ps :-
		query var
			filter P* and {x' :- x' == x}
			min $ < P and true
			in s |-> ps.

	resolveFunc(s, x) = ps :-
		query func
			filter P* and {x' :- x' == x}
			min $ < P and true
			in s |-> ps.

	resolveClass(s, x) = ps :-
		query class
			filter P* and {x' :- x' == x}
			min $ < P and true
			in s |-> ps.

	typeOfVarID(s, x) = T :- {x'}
		resolveVar(s, x) == [(_,(x', T))],
		@x.ref := x'.


	typeOfFunc(s, x) = T :- {x' argTypes}
		resolveFunc(s, x) == [(_,(x', (T, argTypes)))],
		@x.ref := x'.

	typeOfClassID(s, "object") = Object().

	typeOfClassID(s, x) = T :- {x' s_cls}
		resolveClass(s, x) == [(_,(x', (T, s_cls)))],
		@x.ref := x'.

	scopeOfClassID(s, x) = s_cls :- {x' T}
		resolveClass(s, x) == [(_,(x', (T, s_cls)))].

	argsOfFunc(s, x) = argTypes :- {x' T}
		resolveFunc(s, x) == [(_,(x', (T, argTypes)))].
	
////////////Expressions///////////////////////////////

	exprOk(s, e@Not(expr1)) = T :- {T1}
		exprOk(s, expr1) == T1,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		@e.type := Bool().
	
	exprOk(s, e@And(expr1, expr2)) = T :- {T1 T2}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T2]],
		@e.type := Bool().

	exprOk(s, e@Or(expr1, expr2)) = T :- {T1 T2}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T2]],
		@e.type := Bool().

	exprOk(s, e@IfElse(expr1, expr2, expr3)) = T :- {T1 T2 T3}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		exprOk(s, expr3) == T3,
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		@e.type := Bool().



	exprOk(s, e@Constant(cexpr)) = T :-
		cexprOk(s, cexpr) == T,
		@e.type := T.
		
		
////////////Constant Expressions///////////////////////////////

	cexprOk(s, e@VarId(id)) = T :-
		typeOfVarID(s, id) == T | error $[[id] can not be resolved],
		@e.type := T.

	cexprOk(s, e@Plus(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		canAdd(T1, T2) | error $[for additions types [T1] and [T2] need to match],
		T == T1,
		@e.type := T.

	cexprOk(s, e@Times(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for mult types the type of [ec1] needs to be int],
		T2 == Int() | error $[for mult types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Div(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for division types the type of [ec1] needs to be int],
		T2 == Int() | error $[for division types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Mod(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for modulus types the type of [ec1] needs to be int],
		T2 == Int() | error $[for modulus types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Minus(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for substraction the type of [ec1] needs to be int],
		T2 == Int() | error $[for substraction the type of [ec2] needs to be int],
		@e.type := Int().



	cexprOk(s, e@Eq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == T2 | error $[for equality types [T1] and [T2] need to match],
		@e.type := Bool().

	cexprOk(s, e@NotEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == T2 | error $[for non-equality types [T1] and [T2] need to match],
		@e.type := Bool().

	cexprOk(s, e@GtEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@LtEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Gt(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Lt(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Is(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		notSimpleType(T1) | error $[Is can not operate simple types not on [T1]],
		notSimpleType(T2) | error $[Is can not operate on simple types not on [T2]],
		@e.type := Bool().
		
	cexprOk(s, e@ExprLit(l)) = T :- 
		literalOk(s, l) == T,
		@e.type := T.

	cexprOk(s, e@ListLit([])) = T :- 
		T == EmptyList(),
		@e.type := T.

//TODO fix this we need all the elements of the list to be the same??
	cexprOk(s, e@ListLit(x)) = List(T) :-  {n}
		x == [n | _],
		exprOk(s, n) == T | error $[all elements of the list need to be the same?],
		@e.type := List(T).
		
	cexprOk(s, e@Index(x)) = T :-  
		indexExprOk(s, x) == T.
	
	indexExprOk(s, IndexExpr(name, idx)) = T :-
		cexprOk(s, name) == T | error $[[name] is not a valid expression],
		exprOk(s, idx) == Int() | error $[index must be of type int in expr $[idx]].
		
	
	//TODO type check arguments
	cexprOk(s, FuncCall(id, expr)) = T :-
		typeOfFunc(s, id) == T | error $[can not find function [id]].

	cexprOk(s, FuncCall("len", expr)) = T :- 
		T == Int().
		
		
	


		
	
////////////Literals Expressions///////////////////////////////
	literalOk(s, Integer(x)) = Int().
	literalOk(s, String(x)) = String().
	literalOk(s, LitFalse()) = Bool().
	literalOk(s, LitTrue()) = Bool().
	literalOk(s, None()) = NoneType().
		

		
		


		

