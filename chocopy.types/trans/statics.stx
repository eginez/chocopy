module statics
//imports signatures/chocopy-sig
imports lower


rules // single-file entry point

	programOk : Program
    
rules
  
  stmtOk: scope * Stmt
  stmtsOk maps stmtOk(*, list(*))

  ifBlkOk: scope * IfBlock

  elifBlkOk: scope * ElifBlock
  elifBlksOk maps elifBlkOk(*, list(*))

  elseBlkOk: scope * ElseBlock
  elseBlksOk maps elseBlkOk(*, list(*))
  
//Statements & Targets
  simpleStmtOk: scope * SimpleStmt
  targetOk: scope * Target -> TYPE
  blockOk: scope * Block

//Definitions
	defOk: scope * AllDefinitions
	defsOk maps defOk(*, list(*))

	varDefOk: scope * VarDef -> TYPE
	declareVar: scope * TypedVar -> TYPE
	typedVarToID: scope * TypedVar -> ID
	typeOfVar: scope * TypedVar -> TYPE
	typeOfType: scope * Type -> TYPE

  
rules

////////////Syntax///////////////////////////////
	programOk(Program(defs, block)) :- {s}
		new s, //TODO fix this
		s -P-> s,
		defsOk(s, defs),
		blockOk(s, block).

	programOk(ProgramOne(defs)) :- {s}
		new s, //TODO fix this
		s -P-> s,
		defsOk(s, defs).


	blockOk(s, Block(ls)) :-
		stmtsOk(s, ls).
		
////////////Statements///////////////////////////////
	stmtOk(s, SimpleStmt(simple)) :-
		simpleStmtOk(s, simple).

	stmtOk(s, For(id, expr, blk)) :- {T1}
		typeOfVarID(s, id) == T1 | error $[can not resolve [id]],
		exprOk(s, expr) == List(T1) | error $[[expr] neesds to be [List(T1)]],
		blockOk(s, blk).

	stmtOk(s, While(expr, blk)) :-
		exprOk(s, expr) == Bool(),
		blockOk(s, blk).
		
	///// If statmements ////////
	stmtOk(s, StmtIf(ifBlk, elifBlk, elseBlk)) :-
		ifBlkOk(s, ifBlk),
		elifBlksOk(s, elifBlk),
		elseBlksOk(s, elseBlk).
	
	ifBlkOk(s, IfBlock(expr, blk)) :-
		exprOk(s, expr) == Bool() | error $[[expr] needs to be a bool],
		blockOk(s, blk).

	elifBlkOk(s, ElifBlock(expr, blk)) :-
		exprOk(s, expr) == Bool() | error $[[expr] needs to be a bool],
		blockOk(s, blk).

	elseBlkOk(s, ElseBlock(blk)) :-
		blockOk(s, blk).
		
		
	
	simpleStmtOk(s, Pass()) :- true.

	simpleStmtOk(s, RetSimpleStmt(expr)) :- {T}
		exprOk(s, expr) == T.

	simpleStmtOk(s, Expression(expr)) :- {T}
		exprOk(s, expr) == T.

	simpleStmtOk(s, TargetSimpleStmt(trgt, exp)) :- {T1 T2}
		targetOk(s, trgt) == T1 | error $[[trgt] was expected to be declared, missing a declaration?],
		exprOk(s, exp) == T2,
		T1 == T2 | error $[The type of the target [T1] needs to match the type of the expr [T2]].

////////////Targets///////////////////////////////
/// Here we check vars have been declared
	targetOk(s, Identifier(x)) = T :- 
		typeOfVarID(s, x) == T | error $[can not find the declartion of identifier [x]].

	targetOk(s, TargetIndex(x)) = T :- {nameExpr indxExpr}
		indexExprOk(s, x) == T.

////TODO MemberExpr and IndexExpr



////////////VarDef///////////////////////////////

	typeOfType(s, e@TypeID("int")) = Int().
	typeOfType(s, e@TypeID("str")) = String().
	typeOfType(s, e@TypeID("bool")) = Bool().
	typeOfType(s, e@TypeID(x)) = Object().
	typeOfType(s, e@CollectionType(x)) = T :- {T1}
		typeOfType(s, x) == T1,
		T == List(T1),
		@e.type := List(T1).
		


	declareVar(s, e@TypedVar(id, t)) = T :-
		typeOfType(s, t) == T,
		!var[id, T] in s,
		@e.type := T.
		

	typeOfVar(s, TypedVar(x, t)) = T :- {x'}
		typeOfVarID(s, x) == T,
		@x.ref := x'.

		
	varDefOk(s, e@VarDef(tv, l)) = T :- {T1 T2}
		declareVar(s, tv) == T1,
		literalOk(s, l) == T2,
		sameTypes(T1, T2) | error $[the type of the var [T1] does not match the literal type [T2]],
		T1 == T,
		@e.type := T.

		
	defOk(s, e@VarDefinition(x)) :- {T}
		varDefOk(s, x) == T.

		

		
		


		

