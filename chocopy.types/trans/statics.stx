module statics
imports signatures/chocopy-sig

// We expect to get these types in the grading pipeline
// you are free to use your own (custom) types in your Statix file
// as long as you write transformation rules from your types to our types
// in resolve-type
signature
  sorts

  constructors
    Int : Type
    Bool : Type
    String : Type
    ClassType : ID -> Type
    List : Type -> Type
    NoneType : Type
    EmptyList : Type
	Object : Type

// Here you can define the signature of the types you have used in your Statix definiions.
// This is just an example on how to do it.
// signature 
//   sorts
//     MyCustomType
//
//  constructors
//    MyCustomIntType : MyCustomType

rules // single-file entry point

	programOk : Program
    
rules
  
  stmtOk: scope * Stmt
  stmtsOk maps stmtOk(*, list(*))
  
  simpleStmtOk: scope * SimpleStmt


//Expressions
  exprOk: scope * Expr -> Type
  cexprOk: scope * ExprConstant -> Type
  literalOk: scope * Literal -> Type
 
 
  blockOk: scope * Block

//Utils
	notSimpleType: Type
  
  
  


  
rules


////////////Utils///////////////////////////////
	notSimpleType(Int()) :- false.
	notSimpleType(String()) :- false.
	notSimpleType(Bool()) :- false.

////////////Syntax///////////////////////////////
	programOk(Program(defs, block)) :- {s}
		new s, //TODO fix this
		blockOk(s, block).

	blockOk(s, Block(ls)) :-
		stmtsOk(s, ls).
		
	stmtOk(s, SimpleStmt(simple)) :-
		simpleStmtOk(s, simple).
	
	simpleStmtOk(s, Expression(expr)) :- {T}
		exprOk(s, expr) == T.

////////////VarDef///////////////////////////////

	
////////////Expressions///////////////////////////////

	exprOk(s, e@Not(expr1)) = T :- {T1}
		exprOk(s, expr1) == T1,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		@e.type := Bool().
	
	exprOk(s, e@And(expr1, expr2)) = T :- {T1 T2}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T2]],
		@e.type := Bool().

	exprOk(s, e@Or(expr1, expr2)) = T :- {T1 T2}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		T1 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T2]],
		@e.type := Bool().

	exprOk(s, e@IfElse(expr1, expr2, expr3)) = T :- {T1 T2 T3}
		exprOk(s, expr1) == T1,
		exprOk(s, expr2) == T2,
		exprOk(s, expr3) == T3,
		T2 == Bool()| error $[or requires a boolean type on the LHS for [T1]],
		@e.type := Bool().



	exprOk(s, e@Constant(cexpr)) = T :-
		cexprOk(s, cexpr) == T,
		@e.type := T.
		
		
////////////Constant Expressions///////////////////////////////

	cexprOk(s, e@Plus(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 != Bool(),
		T2 != Bool(),
		T1 == T2 | error $[for additions types [T1] and [T2] need to match],
		T == T1,
		@e.type := T.

	cexprOk(s, e@Times(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for mult types the type of [ec1] needs to be int],
		T2 == Int() | error $[for mult types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Div(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for division types the type of [ec1] needs to be int],
		T2 == Int() | error $[for division types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Mod(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for modulus types the type of [ec1] needs to be int],
		T2 == Int() | error $[for modulus types the type of [ec2] needs to be int],
		@e.type := Int().

	cexprOk(s, e@Minus(ec1,ec2)) = T :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == Int() | error $[for substraction the type of [ec1] needs to be int],
		T2 == Int() | error $[for substraction the type of [ec2] needs to be int],
		@e.type := Int().



	cexprOk(s, e@Eq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == T2 | error $[for equality types [T1] and [T2] need to match],
		@e.type := Bool().

	cexprOk(s, e@NotEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		T1 == T2 | error $[for non-equality types [T1] and [T2] need to match],
		@e.type := Bool().

	cexprOk(s, e@GtEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@LtEq(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Gt(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Lt(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == Int(),
		cexprOk(s, ec2) == Int(),
		T1 == T2 | error $[for greater than types [T1] and [T2] need to be int],
		@e.type := Bool().

	cexprOk(s, e@Is(ec1,ec2)) = Bool() :- {T1 T2}
		cexprOk(s, ec1) == T1,
		cexprOk(s, ec2) == T2,
		notSimpleType(T1) | error $[Is can not operate simple types not on [T1]],
		notSimpleType(T2) | error $[Is can not operate on simple types not on [T2]],
		@e.type := Bool().
		
	cexprOk(s, e@ExprLit(l)) = T :- 
		literalOk(s, l) == T,
		@e.type := T.
		
	
////////////Literals Expressions///////////////////////////////
	literalOk(s, Integer(x)) = Int().
	literalOk(s, String(x)) = String().
	literalOk(s, LitFalse()) = Bool().
	literalOk(s, LitTrue()) = Bool().
	literalOk(s, None()) = NoneType().
		

		
		


		

