module test

language chocopy
start symbol Program

test fnsimple [[
def f1() -> int:
	a: int = 0
	a = 1
	return a
]] analysis succeeds

test fnsimple2 [[
def f1(a:int) -> int:
	a = 1
	return a
]] analysis succeeds

test fnsimple3 [[
def f1(a:int, b:int) -> int:
	c :int = 0
	a = b
	c = 1
	return a
]] analysis succeeds

test fnsimple5 [[
def f1(a:int, b:int) -> int:
	c :int = 0
	a = b
	c = 1
	return a
f1(2,3)
]] analysis succeeds

test fnsimple4 [[
def f1(a:int, b:int) -> int:
	a: int = 0
	return a
]] analysis fails



test fnsimple6 [[
def f1(a:int, b:int) -> int:
	c :int = 0
	a = b
	c = 1
	return a
f2(2,3)
]] analysis fails

test fnsimple6 [[
f2(2,3)
]] analysis fails

test fnsimple7 [[
a: int = 0
def f1(a:int, b:int) -> int:
	c :int = 0
	a = b
	c = 1
	return a
a = f1(2,3)
]] analysis succeeds

test fnsimple8 [[
a: bool = True
def f1(a:int, b:int) -> int:
	c :int = 0
	a = b
	c = 1
	return a
a = f1(2,3)
]] analysis fails

test fnsimple9 [[
def f1(a:int, b:int):
	a = 1
]] analysis succeeds

test fnsimple params [[
def f1(a:int, b:int):
	a = 1

f1(0)
]] analysis fails

test fnsimple params types [[
def f1(a:int, b:int):
	a = 1

f1("hi", 2)
]] analysis fails


test class one [[
a:int = 0
class Vector(object):
	def capacity(self:int) -> int:
		return len(self.items)
vec:Vector = None

a = 1 + 1
[[vec]].capacity(2)
]] run get-type on #1 to ClassType("Vector")

test class bad member [[
class Vector(object):
	def capacity(self:int) -> int:
		return len(self.items)
vec:Vector = None

[[vec]].cap2(2)
]] analysis fails

test class bad params [[
class Vector(object):
	def capacity(self:int) -> int:
		return len(self.items)
vec:Vector = None

vec.capacity("hi")
]] analysis fails

test class good member [[
b: int = 0
class Vector(object):
	vv:int = 0

vec:Vector = None
b = vec.vv
]] analysis succeeds

test class bad member [[
class Vector(object):
	vv:int = 0

vec:Vector = None
vec.vv1
]] analysis fails

test class bad member type [[
b: bool = False
class Vector(object):
	vv:int = 0

vec:Vector = None
b = vec.vv
]] analysis fails

test bad class name [[
class Vector(object):
	a: int = 0

def f1():
	return 0

a: Veceee = None
]] analysis fails


test fn lists [[
# Search in a list
def contains(x:int) -> bool:
    items: [int] = None
    items[0] = 0
    return False
]] analysis succeeds


